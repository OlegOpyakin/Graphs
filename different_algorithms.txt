Reaching definitions:

auto Changed = true;
while (Changed) {
    Changed = false;
    for (auto BB : all_blocks) {
        auto NR = BitVector{N, 0}; // new IN vector
        for (auto Pred : preds(BB))
            NR = NR or ROUT[Pred];
        auto RO = GEN[BB] or (NR subtract KILL[BB]) // new out vector
        if (RIN[BB] != NR)
            tie(RIN[BB], Changed) = (NR, true);
        if (ROUT[BB] != RO)
            tie(ROUT[BB], Changed) = (RO, true);
    }
}


Available expressions:

auto Changed = true;
while (Changed) {
    Changed = false;
    for (auto BB : all_blocks) {
        auto NAVIN = BitVector{N, 0}; // new AVIN vector
        for (auto Pred : preds(BB))
            NAVIN = NAVIN and AVOUT[Pred];
        auto NAVOUT = GEN[BB] or (NAVIN subtract KILL[BB]) // new AVOUT vector
        if (AVIN[BB] != NAVIN)
            tie(AVIN[BB], Changed) = (NAVIN, true);
        if (AVOUT[BB] != NAVOUT)
            tie(AVOUT[BB], Changed) = (NAVOUT, true);
    }
}


Live variables:

auto Changed = true;
while (Changed) {
    Changed = false;
    for (auto BB : all_blocks) {
        auto NLVOUT = BitVector{N, 0}; // new LVOUT vector
        for (auto Succ : succ(BB))
            NLVOUT = NLVOUT and LVIN[Succ];
        auto NLVIN = GEN[BB] or (NLVOUT subtract KILL[BB]) // new LVIN vector
        if (LVIN[BB] != NLVIN)
            tie(LVIN[BB], Changed) = (NLVIN, true);
        if (LVOUT[BB] != NLVOUT)
            tie(LVOUT[BB], Changed) = (NLVOUT, true);
    }
}